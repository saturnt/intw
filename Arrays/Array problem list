>>> Find first missing positive number:
    
    The first missing positive number would be between 1 and N(Remember to start from 1 and not zero).
    So any number greater than N and/or any negative number can be set to (N+1), if we encounter a number (N+1) we simply ignore it.
    
    As we traverse through the array simply set the number at that position to -ive. if already negative then dont touch it - otherwise number would become positive.
    Once done, traverse the array again and search for a positive number. if the positive number is found then that index is the answer.
    
    e.g.
        3 4 -1 1 is given.
        
    nums:  3 4 -1  1
    idx:   1 2  3  4
    
    step 1: set negative numver to N+1
    nums: 3 4 5  1
    
    step 2: start traversing and setting number for that index as negative.
     nums: 3 4  -5   1    idx: 0
     nums: 3 4  -5  -1    idx: 1
     nums: 3 4  -5  -1    idx: 2 ignored since abs(-5) > len(nums)
     nums: -3 4 -5  -1    idx: 3, value 1 (so set index 1 as -3) 
     
     Traverse array again and see that 2 is missing since value at idx 2 is possitive and less than N
     
   
>>> Candy distribution:

    if there are 3 children, see below

    _   _   _

    If the rating of the middle child is greater than the rating of the ones to left and right, then he should receive more # of candies.
    
    Consider the following rating of children and find the optimal distribution:
    
               1      7        6       3       8       2       5       10      3
    idx:0      1      0        0       0       0       0       0        0      0        Default: Give 1 candy
    idx:1      1      2        0       0       0       0       0        0      0        Rating of this child is more, so he needs to get more 
                                                                                        candy than the children on left
    idx:3      1      2        1        0      0       0       0        0      0        Default : 1 candy
    idx:4      1      2        1        1      0       0       0        0      0 
    idx:5      1      2        1        1      2       0       0        0      0
    idx:6      1      2        1        1      2       1       0        0      0
    idx:7      1      2        1        1      2       1       2        3      0
    idx:8      1      2        1        1      2       1       2        3      1
    
    Now start from back to check we are giving right number of candies for the ranks:
    
                        1      7        6       3       8       2       5       10      3
    Distribution:       1      2        1       1       2       1       2        3      1
    Result:             1      3        2       1       2       1       2        3      1        Assert the current element if greater than the
                                                                                                 than elements on right, they have more candies than right index.
                                                                                                 
                                                                                                 
>>>  3 sum closest(to 1):

    We will sort the array and then fix the positions and search for the next 2 elements:

    Given an array with index nums[0..N]
    
    1) nums.sort()
    2)
        target=1
        final_tuple=inf
        for i from 0 < N-2;
            curr_num=nums[i]  
            left=i+1
            right=N-1
            while(left < right):
                curr_tuple=curr_num+left+right
                
                # If we are on the right side of target i.e. 1 - we need to come back so decrement target.
                if curr_tuple == target:
                    break
                if curr_tuple > target:
                    right=right-1
                else:
                    left=left+1
                if abs(curr_tuple - target) < final_tuple:
                    final_tuple=curr_tuple
     
    
                
            
          
          
          
          
           
           
           
        
    





    
    
